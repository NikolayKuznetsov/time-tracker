angular.module('app', ['ui.bootstrap', 'ui.router', 'angularMoment']);
angular.module('app').config(function ($stateProvider, $urlRouterProvider, $locationProvider) {

    // $locationProvider.hashPrefix('');
    $urlRouterProvider.otherwise('/');

    $stateProvider
        .state('index', {
            url: '/',
            templateUrl: 'scripts/controllers/main/main-index.html'
        })
        .state('timeTracker', {
            url: '/time-tracker',
            templateUrl: 'scripts/controllers/time-tracker/time-tracker-index.html'
        })
        .state('timeTrackerReport', {
            url: '/time-tracker-report',
            templateUrl: 'scripts/controllers/time-tracker/report/report-time-tracker-index.html'
        });

    $locationProvider.html5Mode(true);
});
var LocalStorageService = function () {
    var storage = this;

    storage.local = localStorage;

    storage.getString = function (key) {
        return storage.local.getItem(key);
    };

    storage.setString = function (key, value) {
        storage.local.setItem(key, value);
    };

    storage.getObject = function (key) {
        return JSON.parse(storage.local.getItem(key));
    };

    storage.setObject = function (key, value) {
        storage.local.setItem(key, JSON.stringify(value));
    };

    storage.removeString = function (key) {
        storage.local.removeItem(key);
    };

    storage.clear = function () {
        storage.local.clear();
    };

    return storage;
};

LocalStorageService.$inject = [];
angular.module('app').service('LocalStorageService', LocalStorageService);

var TimeTrackerCtrl = function ($scope, TimeTrackerService, $q, $http, $timeout, $uibModal) {
    var tt = this;

    tt.JSON_LOCAL_TIME_TRACKER = null;
    tt.title = 'Time tracker';

    tt.values = TimeTrackerService.values;

    tt.timeCounter = 0;
    tt.btnStartTask = [];
    tt.btnDisableStartTimeTracker = true;
    tt.devProgress = true;
    tt.editTimeTaskID = 0;
    var timer = true;

    /*
     * Function init controller
     * */
    tt.initTimeTrackerCtrl = function () {
        tt.generationValueJson();
        TimeTrackerService.getValue();
        tt.getValue();
    };

    /*
     * Generation Value JSON
     * */
    tt.generationValueJson = function () {
        $http.get("/api/mainTimeTracking.json")
            .then(
                function (response) {
                    tt.JSON_LOCAL_TIME_TRACKER = response.data;
                },
                function (error) {
                    console.log("The request failed: " + error);
                });
    };

    /*
     *  Generation tasks
     * */
    tt.generationValue = function () {
        TimeTrackerService.addValueLocalStorage(tt.JSON_LOCAL_TIME_TRACKER);
        tt.getValue();
    };

    /*
     *  Get all list tasks
     * */
    tt.getValue = function () {
        tt.values = TimeTrackerService.values;
    };

    /*
     *  Remove all tasks with LocalStorage
     * */
    tt.removeValue = function () {
        TimeTrackerService.removeValue();
        tt.getValue();
    };

    /*
     *  Remove element from values tasks
     * */
    tt.removeTask = function (id) {
        TimeTrackerService.removeTask(id);
    };

    /*
     *  Start timer time tasks
     * */
    tt.startTimerTask = function (id) {
        tt.btnDisableStartTimeTracker = false;
        tt.btnStartTask[id] = true;
        tt.startCounter(id);

    };

    /*
     *  Stop timer time tasks
     * */
    tt.stopTimerTask = function (id) {
        tt.editTimeTaskID = id;
        tt.btnDisableStartTimeTracker = true;
        tt.btnStartTask[id] = false;
        tt.stopCounter();
        // method update task for LocalStorage
        TimeTrackerService.updateValueLocalStorage(tt.values);

        tt.timeCounter = 0;
    };

    /*
     * Start: Counter task
     * */
    tt.startCounter = function () {
        if (timer != null) {
            tt.updateCounter();
        } else {
            timer = 0;
            tt.updateCounter();
        }
    };

    /*
     * Stop: Counter task
     * */
    tt.stopCounter = function () {
        $timeout.cancel(timer);
        timer = null;
    };

    /*
     * Update: Counter task
     * */
    tt.updateCounter = function () {
        tt.timeCounter++;
        tt.values[tt.editTimeTaskID].time += 1;
        timer = $timeout(tt.startCounter, 1000);
    };

    /*
     * Time format
     * */
    tt.timeFormat = function (number) {
        function num(val) {
            val = Math.floor(val);
            return val < 10 ? '0' + val : val;
        }

        var sec = number,
            hours = sec / 3600 % 24,
            minutes = sec / 60 % 60,
            seconds = sec % 60;
        return num(hours) + ":" + num(minutes) + ":" + num(seconds);
    };

    /*
     * Modal Add Task
     * */
    tt.openModalAddTask = function (size) {
        var modalInstance = $uibModal.open({
            templateUrl: 'scripts/controllers/time-tracker/modal/add-time-tracker.html',
            controller: 'TimeTrackerModalCtrl',
            controllerAs: '$ctrl',
            size: size,
            resolve: {
                data: function () {
                    return undefined;
                }
            }
        });

        modalInstance.result.then(function () {
            tt.getValue();
        }, function () {
            console.log('Modal dismissed at: ' + new Date());
        });
    };

    /*
     * Modal Edit Task
     * */
    tt.editTask = function (id) {
        var modalInstance = $uibModal.open({
            templateUrl: 'scripts/controllers/time-tracker/modal/add-time-tracker.html',
            controller: 'TimeTrackerModalCtrl',
            controllerAs: '$ctrl',
            size: 'sm',
            resolve: {
                data: function () {
                    return tt.values[id];
                }
            }
        });
        modalInstance.result.then(function () {
            tt.getValue();
        }, function () {
            console.log('Modal dismissed at: ' + new Date());
        });
    };

    /*
     * Init Time Tracker Controller
     * */
    tt.initTimeTrackerCtrl();

};

TimeTrackerCtrl.$inject = ['$scope', 'TimeTrackerService', '$q', '$http', '$timeout', '$uibModal'];
angular.module('app').controller('TimeTrackerCtrl', TimeTrackerCtrl);
var TimeTrackerModalCtrl = function ($uibModalInstance, TimeTrackerService, data, moment, $filter) {
    var ttm = this;
    var dateEdit = data ? new Date(data.time * 1000) : undefined;
    ttm.addTask = {};
    ttm.addTask.name = data ? data.name : '';
    ttm.addTask.time = data ? new Date(dateEdit.getUTCFullYear(), dateEdit.getUTCMonth(), dateEdit.getUTCDate(), dateEdit.getUTCHours(), dateEdit.getUTCMinutes(), dateEdit.getUTCSeconds()) : '';
    ttm.addTask.message = data ? data.message : '';
    ttm.addTask.cost = data ? data.cost : '';
    ttm.addTask.status = data ? data.status : '';
    ttm.values = TimeTrackerService.values;
    ttm.valuesAdd = [];
    ttm.id = data ? data.id : -1;

    /*
     * Validation from create task
     * */
    ttm.validationForm = function () {
        if (ttm.addTask.name == '' || ttm.addTask.time == '' || ttm.addTask.message == '' || ttm.addTask.cost == '' || ttm.addTask.status == '') {
            return true;
        }
    };

    /*
     *  Add new task for list and LocalStorage
     * */
    ttm.addNewTask = function () {
        ttm.addValuesArray(ttm.values.length, ttm.addTask.name, ttm.convertDateToSeconds(ttm.addTask.time), ttm.addTask.message, ttm.addTask.cost, ttm.addTask.status, new Date());

        TimeTrackerService.addValueLocalStorage(ttm.valuesAdd);
        // Clean form
        ttm.cleanForm();
        $uibModalInstance.close();
        ttm.getValue();
    };

    /*
     * Add value for array values
     * */
    ttm.addValuesArray = function (id, name, time, message, cost, status, dateCreate) {
        ttm.addValuesJSON(id, name, time, message, cost, status, dateCreate);
        ttm.valuesAdd = [ttm.valuesAdd];
    };

    /*
     * Add value for JSON values
     * */
    ttm.addValuesJSON = function (id, name, time, message, cost, status, dateCreate) {
        ttm.valuesAdd = {
            'id': id,
            'name': name,
            'time': time,
            'message': message,
            'cost': cost,
            'status': status,
            'dateCreate': dateCreate
        };
    };

    /*
     *  Edit task for list and LocalStorage
     * */
    ttm.editTask = function (id) {
        ttm.addValuesJSON(id, ttm.addTask.name, ttm.convertDateToSeconds(ttm.addTask.time), ttm.addTask.message, ttm.addTask.cost, ttm.addTask.status, ttm.values[id].dateCreate);
        ttm.values[id] = ttm.valuesAdd;
        TimeTrackerService.updateValueLocalStorage(ttm.values);
        // Clean form
        ttm.cleanForm();
        $uibModalInstance.close();
        ttm.getValue();
    };

    /*
     *  Get all tasks with LocalStorage
     * */
    ttm.getValue = function () {
        ttm.values = TimeTrackerService.values;
    };

    /*
     * Clean from create task
     * */
    ttm.cleanForm = function () {
        ttm.addTask.name = ttm.addTask.time = ttm.addTask.message = ttm.addTask.cost = ttm.addTask.status = '';
    };

    /*
     * Convert date to seconds
     * */
    ttm.convertDateToSeconds = function (date) {
        console.log(date);
        // var newDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
        return moment.duration($filter('date')(new Date(date), 'HH:mm:ss'), "HH:mm:ss").asSeconds();
    };

    /*
     * convertDateUTC
     * */
    ttm.convertDateUTC = function (date) {
        // return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
        var d = new Date(date * 1000);
        return new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds());
    };

};

TimeTrackerModalCtrl.$inject = ['$uibModalInstance', 'TimeTrackerService', 'data', 'moment', '$filter'];
angular.module('app').controller('TimeTrackerModalCtrl', TimeTrackerModalCtrl);
var TimeTrackerService = function (LocalStorageService) {
    var tts = this;

    tts.KEY_LOCAL_TIME_TRACKER = 'timeTrackerData';
    tts.values = LocalStorageService.getObject(tts.KEY_LOCAL_TIME_TRACKER);

    /*
     *  Get all tasks with LocalStorage
     * */
    tts.getValue = function () {
        tts.values = LocalStorageService.getObject(tts.KEY_LOCAL_TIME_TRACKER);
    };

    /*
     *  Write tasks for LocalStorage
     * */
    tts.addValueLocalStorage = function (jsonValues) {
        if (tts.values === null) {
            tts.values = jsonValues;
        } else {
            tts.values = tts.values.concat(jsonValues);
        }

        LocalStorageService.setObject(tts.KEY_LOCAL_TIME_TRACKER, tts.values);
    };

    /*
     *  Update tasks for LocalStorage
     * */
    tts.updateValueLocalStorage = function (jsonValues) {
        // remove all task for LocalStorage
        tts.removeValue();

        tts.values = jsonValues;

        LocalStorageService.setObject(tts.KEY_LOCAL_TIME_TRACKER, tts.values);
    };

    /*
     *  Remove all tasks with LocalStorage
     * */
    tts.removeValue = function () {
        tts.values = [];

        LocalStorageService.removeString(tts.KEY_LOCAL_TIME_TRACKER);
    };

    /*
     *  Remove one task with LocalStorage
     * */
    tts.removeTask = function (id) {
        tts.values.splice(id, 1);

        LocalStorageService.setObject(tts.KEY_LOCAL_TIME_TRACKER, tts.values);
    };

    tts.getValue();


};

TimeTrackerService.$inject = ['LocalStorageService'];
angular.module('app').service('TimeTrackerService', TimeTrackerService);
var ReportTimeTrackerCtrl = function (TimeTrackerService) {
    var rtt = this;

    rtt.values = TimeTrackerService.values;

    /*
     * Function init controller
     * */
    rtt.initReportTimeTrackerCtrl = function () {
        TimeTrackerService.getValue();
        rtt.getValue();
    };

    /*
     *  Get all list tasks
     * */
    rtt.getValue = function () {
        rtt.values = TimeTrackerService.values;
    };

    rtt.getReportCost = function (status) {
        rtt.getValue();

        var sum = 0;
        if (rtt.values !== null) {
            for (var i = 0; i < rtt.values.length; i++) {
                if (rtt.values[i].status === status) {
                    sum += rtt.values[i].cost * (rtt.values[i].time / 3600)
                }
            }
        }

        return sum;
    };

    /*
     * Init Report Time Tracker Controller
     * */
    rtt.initReportTimeTrackerCtrl();


};

ReportTimeTrackerCtrl.$inject = ['TimeTrackerService'];
angular.module('app').controller('ReportTimeTrackerCtrl', ReportTimeTrackerCtrl);